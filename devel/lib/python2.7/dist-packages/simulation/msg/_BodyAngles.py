# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulation/BodyAngles.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BodyAngles(genpy.Message):
  _md5sum = "dbb3402eec6db5b7fff29a56bafe2d79"
  _type = "simulation/BodyAngles"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 total
int32 id
int32 time
float64 left_hip_yaw
float64 left_hip_roll
float64 left_hip_pitch
float64 left_knee
float64 left_ankle_pitch
float64 left_ankle_roll
float64 right_hip_yaw
float64 right_hip_roll
float64 right_hip_pitch
float64 right_knee
float64 right_ankle_pitch
float64 right_ankle_roll
float64 left_shoulder
float64 left_elbow
float64 right_shoulder
float64 right_elbow"""
  __slots__ = ['total','id','time','left_hip_yaw','left_hip_roll','left_hip_pitch','left_knee','left_ankle_pitch','left_ankle_roll','right_hip_yaw','right_hip_roll','right_hip_pitch','right_knee','right_ankle_pitch','right_ankle_roll','left_shoulder','left_elbow','right_shoulder','right_elbow']
  _slot_types = ['int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       total,id,time,left_hip_yaw,left_hip_roll,left_hip_pitch,left_knee,left_ankle_pitch,left_ankle_roll,right_hip_yaw,right_hip_roll,right_hip_pitch,right_knee,right_ankle_pitch,right_ankle_roll,left_shoulder,left_elbow,right_shoulder,right_elbow

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyAngles, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.total is None:
        self.total = 0
      if self.id is None:
        self.id = 0
      if self.time is None:
        self.time = 0
      if self.left_hip_yaw is None:
        self.left_hip_yaw = 0.
      if self.left_hip_roll is None:
        self.left_hip_roll = 0.
      if self.left_hip_pitch is None:
        self.left_hip_pitch = 0.
      if self.left_knee is None:
        self.left_knee = 0.
      if self.left_ankle_pitch is None:
        self.left_ankle_pitch = 0.
      if self.left_ankle_roll is None:
        self.left_ankle_roll = 0.
      if self.right_hip_yaw is None:
        self.right_hip_yaw = 0.
      if self.right_hip_roll is None:
        self.right_hip_roll = 0.
      if self.right_hip_pitch is None:
        self.right_hip_pitch = 0.
      if self.right_knee is None:
        self.right_knee = 0.
      if self.right_ankle_pitch is None:
        self.right_ankle_pitch = 0.
      if self.right_ankle_roll is None:
        self.right_ankle_roll = 0.
      if self.left_shoulder is None:
        self.left_shoulder = 0.
      if self.left_elbow is None:
        self.left_elbow = 0.
      if self.right_shoulder is None:
        self.right_shoulder = 0.
      if self.right_elbow is None:
        self.right_elbow = 0.
    else:
      self.total = 0
      self.id = 0
      self.time = 0
      self.left_hip_yaw = 0.
      self.left_hip_roll = 0.
      self.left_hip_pitch = 0.
      self.left_knee = 0.
      self.left_ankle_pitch = 0.
      self.left_ankle_roll = 0.
      self.right_hip_yaw = 0.
      self.right_hip_roll = 0.
      self.right_hip_pitch = 0.
      self.right_knee = 0.
      self.right_ankle_pitch = 0.
      self.right_ankle_roll = 0.
      self.left_shoulder = 0.
      self.left_elbow = 0.
      self.right_shoulder = 0.
      self.right_elbow = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i16d().pack(_x.total, _x.id, _x.time, _x.left_hip_yaw, _x.left_hip_roll, _x.left_hip_pitch, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_roll, _x.right_hip_pitch, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll, _x.left_shoulder, _x.left_elbow, _x.right_shoulder, _x.right_elbow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 140
      (_x.total, _x.id, _x.time, _x.left_hip_yaw, _x.left_hip_roll, _x.left_hip_pitch, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_roll, _x.right_hip_pitch, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll, _x.left_shoulder, _x.left_elbow, _x.right_shoulder, _x.right_elbow,) = _get_struct_3i16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i16d().pack(_x.total, _x.id, _x.time, _x.left_hip_yaw, _x.left_hip_roll, _x.left_hip_pitch, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_roll, _x.right_hip_pitch, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll, _x.left_shoulder, _x.left_elbow, _x.right_shoulder, _x.right_elbow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 140
      (_x.total, _x.id, _x.time, _x.left_hip_yaw, _x.left_hip_roll, _x.left_hip_pitch, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_roll, _x.right_hip_pitch, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll, _x.left_shoulder, _x.left_elbow, _x.right_shoulder, _x.right_elbow,) = _get_struct_3i16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i16d = None
def _get_struct_3i16d():
    global _struct_3i16d
    if _struct_3i16d is None:
        _struct_3i16d = struct.Struct("<3i16d")
    return _struct_3i16d
