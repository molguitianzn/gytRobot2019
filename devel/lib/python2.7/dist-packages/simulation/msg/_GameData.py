# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulation/GameData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GameData(genpy.Message):
  _md5sum = "252f7aa3551cd9e19b1c2d0f842ab93b"
  _type = "simulation/GameData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 mode

int32 MODE_NORM=1
int32 MODE_KICK=2

int32 state
int32 remainTime
int32 secondTime
int32 redScore
int32 blueScore

int32 STATE_INIT = 0
int32 STATE_READY = 1
int32 STATE_PLAY = 2
int32 STATE_PAUSE = 3
int32 STATE_END = 4
"""
  # Pseudo-constants
  MODE_NORM = 1
  MODE_KICK = 2
  STATE_INIT = 0
  STATE_READY = 1
  STATE_PLAY = 2
  STATE_PAUSE = 3
  STATE_END = 4

  __slots__ = ['mode','state','remainTime','secondTime','redScore','blueScore']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,state,remainTime,secondTime,redScore,blueScore

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.state is None:
        self.state = 0
      if self.remainTime is None:
        self.remainTime = 0
      if self.secondTime is None:
        self.secondTime = 0
      if self.redScore is None:
        self.redScore = 0
      if self.blueScore is None:
        self.blueScore = 0
    else:
      self.mode = 0
      self.state = 0
      self.remainTime = 0
      self.secondTime = 0
      self.redScore = 0
      self.blueScore = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.mode, _x.state, _x.remainTime, _x.secondTime, _x.redScore, _x.blueScore))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mode, _x.state, _x.remainTime, _x.secondTime, _x.redScore, _x.blueScore,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.mode, _x.state, _x.remainTime, _x.secondTime, _x.redScore, _x.blueScore))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mode, _x.state, _x.remainTime, _x.secondTime, _x.redScore, _x.blueScore,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
