// Generated by gencpp from file simulation/BodyAngles.msg
// DO NOT EDIT!


#ifndef SIMULATION_MESSAGE_BODYANGLES_H
#define SIMULATION_MESSAGE_BODYANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulation
{
template <class ContainerAllocator>
struct BodyAngles_
{
  typedef BodyAngles_<ContainerAllocator> Type;

  BodyAngles_()
    : total(0)
    , id(0)
    , time(0)
    , left_hip_yaw(0.0)
    , left_hip_roll(0.0)
    , left_hip_pitch(0.0)
    , left_knee(0.0)
    , left_ankle_pitch(0.0)
    , left_ankle_roll(0.0)
    , right_hip_yaw(0.0)
    , right_hip_roll(0.0)
    , right_hip_pitch(0.0)
    , right_knee(0.0)
    , right_ankle_pitch(0.0)
    , right_ankle_roll(0.0)
    , left_shoulder(0.0)
    , left_elbow(0.0)
    , right_shoulder(0.0)
    , right_elbow(0.0)  {
    }
  BodyAngles_(const ContainerAllocator& _alloc)
    : total(0)
    , id(0)
    , time(0)
    , left_hip_yaw(0.0)
    , left_hip_roll(0.0)
    , left_hip_pitch(0.0)
    , left_knee(0.0)
    , left_ankle_pitch(0.0)
    , left_ankle_roll(0.0)
    , right_hip_yaw(0.0)
    , right_hip_roll(0.0)
    , right_hip_pitch(0.0)
    , right_knee(0.0)
    , right_ankle_pitch(0.0)
    , right_ankle_roll(0.0)
    , left_shoulder(0.0)
    , left_elbow(0.0)
    , right_shoulder(0.0)
    , right_elbow(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _total_type;
  _total_type total;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _time_type;
  _time_type time;

   typedef double _left_hip_yaw_type;
  _left_hip_yaw_type left_hip_yaw;

   typedef double _left_hip_roll_type;
  _left_hip_roll_type left_hip_roll;

   typedef double _left_hip_pitch_type;
  _left_hip_pitch_type left_hip_pitch;

   typedef double _left_knee_type;
  _left_knee_type left_knee;

   typedef double _left_ankle_pitch_type;
  _left_ankle_pitch_type left_ankle_pitch;

   typedef double _left_ankle_roll_type;
  _left_ankle_roll_type left_ankle_roll;

   typedef double _right_hip_yaw_type;
  _right_hip_yaw_type right_hip_yaw;

   typedef double _right_hip_roll_type;
  _right_hip_roll_type right_hip_roll;

   typedef double _right_hip_pitch_type;
  _right_hip_pitch_type right_hip_pitch;

   typedef double _right_knee_type;
  _right_knee_type right_knee;

   typedef double _right_ankle_pitch_type;
  _right_ankle_pitch_type right_ankle_pitch;

   typedef double _right_ankle_roll_type;
  _right_ankle_roll_type right_ankle_roll;

   typedef double _left_shoulder_type;
  _left_shoulder_type left_shoulder;

   typedef double _left_elbow_type;
  _left_elbow_type left_elbow;

   typedef double _right_shoulder_type;
  _right_shoulder_type right_shoulder;

   typedef double _right_elbow_type;
  _right_elbow_type right_elbow;





  typedef boost::shared_ptr< ::simulation::BodyAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulation::BodyAngles_<ContainerAllocator> const> ConstPtr;

}; // struct BodyAngles_

typedef ::simulation::BodyAngles_<std::allocator<void> > BodyAngles;

typedef boost::shared_ptr< ::simulation::BodyAngles > BodyAnglesPtr;
typedef boost::shared_ptr< ::simulation::BodyAngles const> BodyAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulation::BodyAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulation::BodyAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'simulation': ['/home/molguitianzn/my_git/SEURoboCup2019/src/simulation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulation::BodyAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulation::BodyAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::BodyAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::BodyAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::BodyAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::BodyAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulation::BodyAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbb3402eec6db5b7fff29a56bafe2d79";
  }

  static const char* value(const ::simulation::BodyAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbb3402eec6db5b7ULL;
  static const uint64_t static_value2 = 0xfff29a56bafe2d79ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulation::BodyAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulation/BodyAngles";
  }

  static const char* value(const ::simulation::BodyAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulation::BodyAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 total\n\
int32 id\n\
int32 time\n\
float64 left_hip_yaw\n\
float64 left_hip_roll\n\
float64 left_hip_pitch\n\
float64 left_knee\n\
float64 left_ankle_pitch\n\
float64 left_ankle_roll\n\
float64 right_hip_yaw\n\
float64 right_hip_roll\n\
float64 right_hip_pitch\n\
float64 right_knee\n\
float64 right_ankle_pitch\n\
float64 right_ankle_roll\n\
float64 left_shoulder\n\
float64 left_elbow\n\
float64 right_shoulder\n\
float64 right_elbow\n\
";
  }

  static const char* value(const ::simulation::BodyAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulation::BodyAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total);
      stream.next(m.id);
      stream.next(m.time);
      stream.next(m.left_hip_yaw);
      stream.next(m.left_hip_roll);
      stream.next(m.left_hip_pitch);
      stream.next(m.left_knee);
      stream.next(m.left_ankle_pitch);
      stream.next(m.left_ankle_roll);
      stream.next(m.right_hip_yaw);
      stream.next(m.right_hip_roll);
      stream.next(m.right_hip_pitch);
      stream.next(m.right_knee);
      stream.next(m.right_ankle_pitch);
      stream.next(m.right_ankle_roll);
      stream.next(m.left_shoulder);
      stream.next(m.left_elbow);
      stream.next(m.right_shoulder);
      stream.next(m.right_elbow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulation::BodyAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulation::BodyAngles_<ContainerAllocator>& v)
  {
    s << indent << "total: ";
    Printer<int32_t>::stream(s, indent + "  ", v.total);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
    s << indent << "left_hip_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_yaw);
    s << indent << "left_hip_roll: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_roll);
    s << indent << "left_hip_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_pitch);
    s << indent << "left_knee: ";
    Printer<double>::stream(s, indent + "  ", v.left_knee);
    s << indent << "left_ankle_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.left_ankle_pitch);
    s << indent << "left_ankle_roll: ";
    Printer<double>::stream(s, indent + "  ", v.left_ankle_roll);
    s << indent << "right_hip_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_yaw);
    s << indent << "right_hip_roll: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_roll);
    s << indent << "right_hip_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_pitch);
    s << indent << "right_knee: ";
    Printer<double>::stream(s, indent + "  ", v.right_knee);
    s << indent << "right_ankle_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.right_ankle_pitch);
    s << indent << "right_ankle_roll: ";
    Printer<double>::stream(s, indent + "  ", v.right_ankle_roll);
    s << indent << "left_shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.left_shoulder);
    s << indent << "left_elbow: ";
    Printer<double>::stream(s, indent + "  ", v.left_elbow);
    s << indent << "right_shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.right_shoulder);
    s << indent << "right_elbow: ";
    Printer<double>::stream(s, indent + "  ", v.right_elbow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATION_MESSAGE_BODYANGLES_H
