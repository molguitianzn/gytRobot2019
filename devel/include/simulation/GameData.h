// Generated by gencpp from file simulation/GameData.msg
// DO NOT EDIT!


#ifndef SIMULATION_MESSAGE_GAMEDATA_H
#define SIMULATION_MESSAGE_GAMEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulation
{
template <class ContainerAllocator>
struct GameData_
{
  typedef GameData_<ContainerAllocator> Type;

  GameData_()
    : mode(0)
    , state(0)
    , remainTime(0)
    , secondTime(0)
    , redScore(0)
    , blueScore(0)  {
    }
  GameData_(const ContainerAllocator& _alloc)
    : mode(0)
    , state(0)
    , remainTime(0)
    , secondTime(0)
    , redScore(0)
    , blueScore(0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _state_type;
  _state_type state;

   typedef int32_t _remainTime_type;
  _remainTime_type remainTime;

   typedef int32_t _secondTime_type;
  _secondTime_type secondTime;

   typedef int32_t _redScore_type;
  _redScore_type redScore;

   typedef int32_t _blueScore_type;
  _blueScore_type blueScore;



  enum {
    MODE_NORM = 1,
    MODE_KICK = 2,
    STATE_INIT = 0,
    STATE_READY = 1,
    STATE_PLAY = 2,
    STATE_PAUSE = 3,
    STATE_END = 4,
  };


  typedef boost::shared_ptr< ::simulation::GameData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulation::GameData_<ContainerAllocator> const> ConstPtr;

}; // struct GameData_

typedef ::simulation::GameData_<std::allocator<void> > GameData;

typedef boost::shared_ptr< ::simulation::GameData > GameDataPtr;
typedef boost::shared_ptr< ::simulation::GameData const> GameDataConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulation::GameData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulation::GameData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'simulation': ['/home/molguitianzn/my_git/SEURoboCup2019/src/simulation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulation::GameData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulation::GameData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::GameData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::GameData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::GameData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::GameData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulation::GameData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "252f7aa3551cd9e19b1c2d0f842ab93b";
  }

  static const char* value(const ::simulation::GameData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x252f7aa3551cd9e1ULL;
  static const uint64_t static_value2 = 0x9b1c2d0f842ab93bULL;
};

template<class ContainerAllocator>
struct DataType< ::simulation::GameData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulation/GameData";
  }

  static const char* value(const ::simulation::GameData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulation::GameData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n\
\n\
int32 MODE_NORM=1\n\
int32 MODE_KICK=2\n\
\n\
int32 state\n\
int32 remainTime\n\
int32 secondTime\n\
int32 redScore\n\
int32 blueScore\n\
\n\
int32 STATE_INIT = 0\n\
int32 STATE_READY = 1\n\
int32 STATE_PLAY = 2\n\
int32 STATE_PAUSE = 3\n\
int32 STATE_END = 4\n\
";
  }

  static const char* value(const ::simulation::GameData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulation::GameData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.state);
      stream.next(m.remainTime);
      stream.next(m.secondTime);
      stream.next(m.redScore);
      stream.next(m.blueScore);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulation::GameData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulation::GameData_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "remainTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remainTime);
    s << indent << "secondTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.secondTime);
    s << indent << "redScore: ";
    Printer<int32_t>::stream(s, indent + "  ", v.redScore);
    s << indent << "blueScore: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blueScore);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATION_MESSAGE_GAMEDATA_H
